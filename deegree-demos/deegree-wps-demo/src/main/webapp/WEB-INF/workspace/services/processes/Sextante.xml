<?xml version="1.0" encoding="UTF-8"?>
<SextanteProcesses configVersion="0.1.0"
  xmlns="http://www.deegree.org/services/wps/sextante" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.deegree.org/services/wps/sextante sextante.xsd">

  <Process id="boundingbox">
    <Abstract>This algorithm generates a new vector layer with a single
      polygon representing the bounding box of an input vector layer.
    </Abstract>
  </Process>

  <Process id="centroids">
    <Abstract>Creates a new points layer with the centroids of the
      polygons in a given layer.</Abstract>
  </Process>

  <Process id="changelinedirection">
    <Abstract>This algorithm inverts the ordering of vertices in a line,
      thus reversing its orientation.</Abstract>
  </Process>

  <Process id="cleanpointslayer">
    <Abstract>This algorithm eliminates duplicated points. If several
      points with the same coordinates appear in a layer, the algorithm
      will leave just the first one of them, removing the remaining
      ones.</Abstract>
  </Process>

  <Process id="cleanvectorlayer">
    <Abstract>This algorithms checks the integrity of the attributes
      tables of a vector layer and removes invalid features (features
      with missing attributes or invalid values). The number of invalid
      features is shown in a message in the SEXTANTE log window.
    </Abstract>
  </Process>

  <Process id="clip">
    <Abstract>This algorithm clips a vector layer using the polygons
      from an additional polygons layer.</Abstract>
  </Process>

  <Process id="countpoints">
    <Abstract>This algorithm counts the points in each polygon of a
      given vector layer.</Abstract>
  </Process>

  <Process id="delaunay">
    <Abstract>This algorithm creates a delaunay triangulation from a set
      of points.</Abstract>
  </Process>

  <Process id="difference">
    <Abstract>-</Abstract>
  </Process>

  <Process id="extractendpointsoflines">
    <Abstract>-</Abstract>
  </Process>

  <Process id="extractnodes">
    <Abstract>-</Abstract>
  </Process>

  <Process id="geometricproperties">
    <Abstract>This algorithm computes some geometric properties of the
      polygons in a given vector layer.</Abstract>
  </Process>

  <Process id="geometricpropertieslines">
    <Abstract>This algorithm computes some geometric properties of the
      lines in a given vector layer.</Abstract>
  </Process>

  <Process id="geometriestopoints">
    <Abstract>This algorithm generates a new points layer, taking all
      nodes from an input vector layer. Attributes of each point are
      taken from the geometry it belongs to.</Abstract>
  </Process>

  <Process id="intersection">
    <Abstract>This algorithm computes the intersection between two
      polygon vector layers. This is equivalent to a boolean AND
      operator. The geometries are altered and attributes table of the
      resulting layer contains as many fields as the union of both input
      attributes tables, as shown in the following picture.</Abstract>
  </Process>

  <Process id="nodelines">
    <Abstract>-</Abstract>
  </Process>

  <Process id="pointcoordinates">
    <Abstract>This algorithm takes a points layer and generates a new
      layer with those same points, but adding two new fields (X and Y)
      to its attributes table, containing X and Y coordinates of each
      point</Abstract>
  </Process>

  <Process id="polygonize">
    <Abstract>-</Abstract>
  </Process>

  <Process id="polygonstopolylines">
    <Abstract>This algorithms converts a polygons layer into a polylines
      layer.</Abstract>
  </Process>

  <Process id="polylinestopolygons">
    <Abstract>This algorithm converts polylines to polygons. Each
      polygon gets the attributes of the polyline it was created from.
    </Abstract>
  </Process>

  <Process id="polylinestosinglesegments">
    <Abstract>This algorithm takes a lines layer and generates a new
      lines layer where each line has been substituted by a single
      segment (a line with just two nodes), which best approximate the
      direction and shape of the input line.
    </Abstract>
  </Process>

  <Process id="removeholes">
    <Abstract>This algorithm removes holes from polygons in a polygon
      layer. A hole is an empty area within a polygon. Polygons with
      holes are defined as a envelope polygon (the outer contour) and a
      set of inner ones (the holes). This algorithm transform each
      polygon, removing those inner subpolygons and leaving just the
      outer one.</Abstract>
  </Process>

  <Process id="removerepeatedgeometries">
    <Abstract>-</Abstract>
  </Process>

  <Process id="splitmultipart">
    <Abstract>This algorithm separates those features that contains more
      than one single geometry. The resulting layer will contain each
      one of those geometries in a different feature. All features will
      share the same associated attributes.</Abstract>
  </Process>

  <Process id="splitpolylinesatnodes">
    <Abstract>-</Abstract>
  </Process>

  <Process id="symdifference">
    <Abstract>-</Abstract>
  </Process>

  <Process id="union">
    <Abstract>-</Abstract>
  </Process>

  <Process id="vectormean">
    <Abstract>This algorithm computes the directional mean of a set of
      lines in a vector layer. Each segment of the input lines is
      treated as a vector. Summing up all those vector, a new one
      showing the directional mean is obtained. This vector is
      represented as a single-segment line in the resulting vector
      layer. The modulus of the resulting vector provides information
      about the directional variance. Uniform directions will yield
      longer vectors.</Abstract>
  </Process>

  <Process id="clipbyrectangle">
    <Abstract>This algorithms clips a vector layer using a rectangular
      area defined by its max and min coordinates. Instead of using a
      second layer to define the clipping region, this is defined
      numerically by the user. Useful in scripting and batch mode.
    </Abstract>
  </Process>

  <Process id="groupnearfeatures">
    <Abstract>-</Abstract>
  </Process>

  <Process id="joinadjacentlines">
    <Abstract>-</Abstract>
  </Process>

  <Process id="linestoequispacedpoints">
    <Abstract>This algorithm creates a new points layer by adding evenly
      spaced points along the lines of an input layer</Abstract>
  </Process>

  <Process id="perturbatepointslayer">
    <Abstract>This algorithm alter the position of points in a layer,
      displacing them. Points are displaced in a random direction, and
      the displacement distance follows a normal distribution.
    </Abstract>
  </Process>

  <Process id="snappoints">
    <Abstract>This algorithm snaps points in a given layer to the lines
      in a second one.
    </Abstract>
  </Process>

  <Process id="transform">
    <Abstract>This algorithm applies a affine transformation to all the
      geometries of a given vector layer.</Abstract>
  </Process>

  <Process id="vectorspatialcluster">
    <Abstract>This algorithm creates clusters from an input points
      layer, grouping them according to their spatial location.
    </Abstract>
  </Process>

  <Process id="fixeddistancebuffer">
    <Abstract>This algorithm creates a new polygon layer with buffers
      around features in the input layer. All buffers will have the same
      size, regardless of the feature being buffered.</Abstract>
    <SelectionParameters id="TYPES">
      <Parameter id="BUFFER_OUTSIDE_POLY" value="0" />
      <Parameter id="BUFFER_INSIDE_POLY" value="1" />
      <Parameter id="BUFFER_INSIDE_OUTSIDE_POLY" value="2" />
    </SelectionParameters>
    <SelectionParameters id="RINGS">
      <Parameter id="NUMBER_OF_RINGS" value="0-*" />
    </SelectionParameters>
  </Process>

  <Process id="generateroutes">
    <Abstract>This algorithm creates a number of new alternative routes
      based on an original route, linking the same starting and end
      points.</Abstract>
    <SelectionParameters id="METHOD">
      <Parameter id="CREATION_METHOD_BROWNIAN_(doesn't work)"
        value="0" />
      <Parameter id="CREATION_METHOD_RECOMBINE_(works)" value="1" />
    </SelectionParameters>
  </Process>

  <Process id="simplifylines">
    <Abstract>This algorithm simplifies lines, reducing the number of
      vertices in each of them.</Abstract>
  </Process>

  <Process id="simplifypolygons">
    <Abstract>This algorithm simplifies points, removing nodes from
      them. This reduces the amount of data needed to store a polygon,
      while preserving its original shape as much as possible. The
      number of nodes removed depends on a tolerance value.</Abstract>
  </Process>

  <Process id="smoothlines">
    <Abstract>This algorithm smooth the lines in a lines layer, adding
      extra nodes to it. This is the inverse operation to the one
      performed by the "simplify lines" algorithms.</Abstract>
    <SelectionParameters id="INTERMEDIATE_POINTS">
      <Parameter id="NUMBER_OF_POINTS" value="1-10" />
    </SelectionParameters>
    <SelectionParameters id="CURVE_TYPE">
      <Parameter id="NATURAL_CUBIC_SPLINES" value="0" />
      <Parameter id="BEZIER_CURVES" value="1" />
      <Parameter id="BSPLINES" value="2" />
    </SelectionParameters>
  </Process>

  <Process id="splitlineswithpoints">
    <Abstract>This algorithm splits a lines layer using an additional
      points layer. Points at a distance from a line lower than a given
      threshold will cause the be split at the closest point between
      both.A value from the point is added to the line. The user can
      select whether to add it to the segment finishing at the point or
      to the one starting at it.</Abstract>
    <SelectionParameters id="METHOD">
      <Parameter id="START_VALUE" value="0" />
      <Parameter id="LAST_VALUE" value="1" />
    </SelectionParameters>
  </Process>

  <Process id="vectoraddfield">
    <Abstract>-</Abstract>
    <SelectionParameters id="FIELD_TYPE">
      <Parameter id="INTEGER" value="0" />
      <Parameter id="DOUBLE" value="1" />
      <Parameter id="STRING" value="2" />
    </SelectionParameters>
  </Process>

  <Process id="vectorcluster">
    <Abstract>This algorithm classifies features in a vector layer into
      a given number of classes, using the values of a variable
      associated with those features.</Abstract>
  </Process>

  <Process id="vectorfieldcalculator">
    <Abstract>-</Abstract>
  </Process>

</SextanteProcesses>