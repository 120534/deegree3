//$HeadURL$
/*----------------------------------------------------------------------------
 This file is part of deegree, http://deegree.org/
 Copyright (C) 2001-2009 by:
 - Department of Geography, University of Bonn -
 and
 - lat/lon GmbH -

 This library is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation; either version 2.1 of the License, or (at your option)
 any later version.
 This library is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 details.
 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation, Inc.,
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

 Contact information:

 lat/lon GmbH
 Aennchenstr. 19, 53177 Bonn
 Germany
 http://lat-lon.de/

 Department of Geography, University of Bonn
 Prof. Dr. Klaus Greve
 Postfach 1147, 53001 Bonn
 Germany
 http://www.geographie.uni-bonn.de/deegree/

 e-mail: info@deegree.org
 ----------------------------------------------------------------------------*/

package org.deegree.feature.persistence.lock;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;

import javax.xml.namespace.QName;

import org.deegree.commons.configuration.DatabaseType;
import org.deegree.commons.jdbc.ConnectionManager;
import org.deegree.commons.utils.CloseableIterator;
import org.deegree.feature.persistence.FeatureStoreException;
import org.deegree.filter.Filter;

/**
 * {@link LockManager} implementation that is based on an SQL database.
 * <p>
 * DROP TABLE LOCKED_FIDS;
 * DROP TABLE LOCKS;
 * 
 * CREATE TABLE LOCKS (
 *  ID INT NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
 *  ACQUIRED TIMESTAMP NOT NULL,
 *  EXPIRES TIMESTAMP NOT NULL
 * );
 * CREATE TABLE LOCKED_FIDS (
 *  LOCK_ID INT REFERENCES LOCKS,
 *  FID VARCHAR(255) NOT NULL UNIQUE
 * );
 * </p>
 * 
 * jdbc:derby:/tmp/lockdb;create=true
 * 
 * @author <a href="mailto:schneider@lat-lon.de">Markus Schneider</a>
 * @author last edited by: $Author$
 * 
 * @version $Revision$, $Date$
 */
public class DefaultLockManager implements LockManager {

    private static final String LOCK_DB = "EMBEDDED_LOCK_DB";

    private String jdbcConnId;

    public DefaultLockManager( String jdbcConnId ) {
        this.jdbcConnId = jdbcConnId;
    }

    private void setupDatabase( Connection conn ) {
        // Statement stmt = conn.createStatement();
        // stmt.executeUpdate( "CREATE SEQUENCE LOCK_ID_SEQ" );
    }

    @Override
    public Lock acquireLock( QName ftName, Filter filter, boolean mustLockAll )
                            throws FeatureStoreException {

        Lock lock = null;
        try {
            // create entry in LOCKS table
            Connection conn = ConnectionManager.getConnection( jdbcConnId );
            PreparedStatement stmt = conn.prepareStatement( "INSERT INTO LOCKS (ACQUIRED, EXPIRES) VALUES (?,?)",
                                                            PreparedStatement.RETURN_GENERATED_KEYS );
            Date acquired = new Date();
            Date expires = new Date( acquired.getTime() + 5 * 60 * 1000 );
            stmt.setTimestamp( 1, new Timestamp( acquired.getTime() ) );
            stmt.setTimestamp( 2, new Timestamp( expires.getTime() ) );
            stmt.execute();

            ResultSet rs = stmt.getGeneratedKeys();
            if ( rs == null || !rs.next() ) {
                throw new FeatureStoreException( "No autogenerated key!?" );
            }
            int lockId = rs.getInt( 1 );
            rs.close();            
            lock = new DefaultLock( jdbcConnId, "" + lockId, acquired, expires );

            stmt = conn.prepareStatement( "INSERT INTO LOCKED_FIDS (LOCK_ID, FID) VALUES (?,?)");
            stmt.setInt( 1, lockId );
            stmt.setString( 2, "BLABLABLA_1" );
            stmt.execute();
            
            stmt = conn.prepareStatement( "INSERT INTO LOCKED_FIDS (LOCK_ID, FID) VALUES (?,?)");
            stmt.setInt( 1, lockId );
            stmt.setString( 2, "BLABLABLA_2" );
            stmt.execute();            
            
            conn.commit();
            stmt.close();
            conn.close();
        } catch ( SQLException e ) {
            throw new FeatureStoreException( e.getMessage(), e );
        }
        return lock;
    }

    @Override
    public Iterable<Lock> getActiveLocks() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Lock getLock( String lockId ) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public void releaseLock( Lock lock )
                            throws FeatureStoreException {
        // TODO Auto-generated method stub

    }

    public static void main( String[] args )
                            throws FeatureStoreException {
        ConnectionManager.addConnection( "LOCK_DB", DatabaseType.UNDEFINED, "jdbc:derby:/tmp/lockdb;create=true", null,
                                         null, 0, 10 );

        LockManager manager = new DefaultLockManager( "LOCK_DB" );
        Lock lock = manager.acquireLock( new QName( "http://www.deegree.org/app", "Philosopher" ), null, false );
        System.out.println( lock );

        CloseableIterator<String> fidIter = lock.getLockedFeatures();
        try {
            while ( fidIter.hasNext() ) {
                String fid = fidIter.next();
                System.out.println( fid );
            }
        } finally {
            fidIter.close();
        }
    }
}
