package org.deegree.commons.utils.templating;

import java.util.HashMap;
import java.util.LinkedList;
import java_cup.runtime.*;
import org.deegree.commons.utils.*;
import org.deegree.commons.utils.templating.lang.*;

terminal String    TEXT_TOKEN, TEMPLATE_DEFINITION_TOKEN, MAP_DEFINITION_TOKEN,
                   EVEN_CALL_TOKEN, ODD_CALL_TOKEN, INDEX_CALL_TOKEN, VALUE_TOKEN, NAME_TOKEN,
                   LINK_CALL_TOKEN, MAP_KEY_TOKEN, MAP_VALUE_TOKEN;
terminal String[]  PROPERTY_TEMPLATE_CALL_TOKEN, FEATURE_TEMPLATE_CALL_TOKEN, MAP_CALL_TOKEN;
non terminal HashMap<String, Definition>      definition;
non terminal TemplateDefinition               template;
non terminal MapDefinition                    map;
non terminal Object                           templatebody;

definition ::= TEMPLATE_DEFINITION_TOKEN:def template:tmpl             {: RESULT = new HashMap<String, Definition>();
                                                                          tmpl.name = def;
                                                                          RESULT.put(tmpl.name, tmpl); :}
         | TEMPLATE_DEFINITION_TOKEN:def template:tmpl definition:defs {: tmpl.name = def;
                                                                          defs.put(tmpl.name, tmpl);
                                                                          RESULT = defs; :}
         | MAP_DEFINITION_TOKEN:def map:map                            {: RESULT = new HashMap<String, Definition>();
                                                                          map.name = def;
                                                                          RESULT.put(map.name, map); :}
         | MAP_DEFINITION_TOKEN:def map:map definition:defs            {: map.name = def;
                                                                          defs.put(map.name, map);
                                                                          RESULT = defs; :};

template ::= templatebody:obj template:tmpl     {: tmpl.body.add(0, obj);
                                                   RESULT = tmpl; :}
         | templatebody:obj                     {: RESULT = new TemplateDefinition();
                                                   RESULT.body.add(obj); :};
         
templatebody ::= TEXT_TOKEN:text                {: RESULT = text; :}
         | PROPERTY_TEMPLATE_CALL_TOKEN:call    {: RESULT = new PropertyTemplateCall(call[1], call[0]); :}
         | FEATURE_TEMPLATE_CALL_TOKEN:call     {: RESULT = new FeatureTemplateCall(call[1], call[0]); :}
         | MAP_CALL_TOKEN:call                  {: if(call[0].equalsIgnoreCase("name")) RESULT = new MapCall(call[1], MapCall.Type.Name);
                                                   else RESULT = new MapCall(call[1], MapCall.Type.Value); :}
         | EVEN_CALL_TOKEN:call                 {: RESULT = new OddEven(call, false); :}
         | ODD_CALL_TOKEN:call                  {: RESULT = new OddEven(call, true); :}
         | INDEX_CALL_TOKEN                     {: RESULT = new Index(); :}
         | NAME_TOKEN                           {: RESULT = new Name(); :}
         | VALUE_TOKEN                          {: RESULT = new Value(); :}
         | LINK_CALL_TOKEN                      {: RESULT = new Link(); :};

map ::= MAP_KEY_TOKEN:key MAP_VALUE_TOKEN:val map:def {: def.map.put(key, val);
                                                         RESULT = def; :}
         | MAP_KEY_TOKEN:key MAP_VALUE_TOKEN:val      {: RESULT = new MapDefinition();
                                                         RESULT.map.put(key, val); :};
