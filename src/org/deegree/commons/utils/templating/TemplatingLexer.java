/* The following code was generated by JFlex 1.4.1 on 1/21/10 4:54 PM */

package org.deegree.commons.utils.templating;

import java_cup.runtime.*;

/**
 * <code>TemplatingLexer</code>
 *
 * @author <a href="mailto:schmitz@lat-lon.de">Andreas Schmitz</a>
 * @author last edited by: $Author$
 *
 * @version $Revision$, $Date$
 */
@SuppressWarnings("all")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/21/10 4:54 PM from the specification file
 * <tt>Templating.flex</tt>
 */
public class TemplatingLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LINK = 6;
  public static final int TEMPLATE = 1;
  public static final int YYINITIAL = 0;
  public static final int TEMPLATE_NAME = 5;
  public static final int MAP_VALUE = 3;
  public static final int MAP_KEY = 2;
  public static final int CALL = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\1\1\0\1\7\1\0\2\1\22\0\1\4\7\0\1\41"+
    "\1\37\1\36\1\0\1\40\1\0\1\0\1\11\12\3\1\27\1\0"+
    "\1\5\1\35\1\10\1\6\1\0\32\2\6\0\1\21\2\2\1\30"+
    "\1\15\1\20\1\34\1\2\1\31\1\2\1\32\1\24\1\23\1\25"+
    "\1\14\1\12\1\2\1\13\1\2\1\16\1\22\1\26\1\2\1\33"+
    "\1\17\1\2\57\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2"+
    "\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0\14\2\16\0\5\2"+
    "\11\0\1\2\213\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2"+
    "\10\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2\41\0\46\2"+
    "\2\0\1\2\7\0\47\2\110\0\33\2\5\0\3\2\56\0\32\2"+
    "\5\0\13\2\43\0\2\2\1\0\143\2\1\0\1\2\17\0\2\2"+
    "\7\0\2\2\12\0\3\2\2\0\1\2\20\0\1\2\1\0\36\2"+
    "\35\0\3\2\60\0\46\2\13\0\1\2\u0152\0\66\2\3\0\1\2"+
    "\22\0\1\2\7\0\12\2\43\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\36\0\2\2"+
    "\1\0\3\2\16\0\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\23\0\3\2\20\0\11\2\1\0\3\2\1\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2\22\0\1\2"+
    "\17\0\2\2\43\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\5\2\3\0\1\2\36\0\2\2\1\0\3\2"+
    "\17\0\1\2\21\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2"+
    "\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2"+
    "\3\0\10\2\1\0\3\2\113\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\12\2\1\0\5\2\46\0\2\2\43\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2"+
    "\1\0\2\2\43\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2"+
    "\46\0\2\2\43\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2"+
    "\2\0\7\2\72\0\60\2\1\0\2\2\14\0\7\2\72\0\2\2"+
    "\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2"+
    "\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2"+
    "\1\0\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2"+
    "\25\0\2\2\42\0\1\2\77\0\10\2\1\0\42\2\35\0\4\2"+
    "\164\0\42\2\1\0\5\2\1\0\2\2\45\0\6\2\112\0\46\2"+
    "\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2"+
    "\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2\105\0\125\2"+
    "\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2\25\0\15\2"+
    "\1\0\4\2\16\0\22\2\16\0\22\2\16\0\15\2\1\0\3\2"+
    "\17\0\64\2\43\0\1\2\4\0\1\2\103\0\130\2\10\0\51\2"+
    "\127\0\35\2\63\0\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2"+
    "\4\0\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2"+
    "\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2"+
    "\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2"+
    "\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2"+
    "\164\0\1\2\15\0\1\2\202\0\1\2\4\0\1\2\2\0\12\2"+
    "\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2"+
    "\u0ebb\0\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2"+
    "\1\0\132\2\1\0\4\2\5\0\50\2\4\0\136\2\21\0\30\2"+
    "\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2"+
    "\u215c\0\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\0\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2"+
    "\50\0\14\2\164\0\5\2\1\0\207\2\44\0\32\2\6\0\32\2"+
    "\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\3\0\4\2\1\3\1\4\13\0\1\5"+
    "\1\3\1\0\2\3\1\6\1\1\1\3\2\7\1\10"+
    "\1\11\1\12\1\13\1\14\2\0\1\2\1\0\1\15"+
    "\16\0\1\7\16\0\1\16\1\0\1\17\6\0\1\20"+
    "\1\21\3\0\1\22\2\0\1\23\3\0\1\24\1\0"+
    "\1\25\1\26\1\27\1\30\1\0\1\31\11\0\1\32"+
    "\1\0\1\33\2\0\1\34\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\356\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\356\0\356\0\u0396\0\146"+
    "\0\u03b8\0\u03da\0\356\0\356\0\356\0\356\0\252\0\u03fc"+
    "\0\u041e\0\u0440\0\u0462\0\356\0\u0484\0\u04a6\0\u04c8\0\u04ea"+
    "\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa"+
    "\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a"+
    "\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a"+
    "\0\u083c\0\u03b8\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908"+
    "\0\u092a\0\u094c\0\356\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6"+
    "\0\u0a18\0\u0a3a\0\u08c4\0\u0a5c\0\u0a7e\0\u0aa0\0\u094c\0\u0ac2"+
    "\0\u096e\0\356\0\356\0\u0ae4\0\u0b06\0\u0a5c\0\u0b28\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\356"+
    "\0\u0c5a\0\356\0\u0c7c\0\u0c9e\0\u0c7c\0\u0c9e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\2\12\1\11\1\13\1\10\1\11\2\10"+
    "\15\12\1\10\5\12\5\10\1\0\1\14\2\0\1\14"+
    "\2\0\1\14\1\15\1\0\1\16\1\0\1\17\1\20"+
    "\1\21\1\0\1\22\2\0\1\23\1\24\1\25\1\26"+
    "\2\0\1\27\2\0\1\30\5\0\1\31\1\32\2\31"+
    "\1\32\1\33\1\31\1\34\1\35\24\31\1\36\4\31"+
    "\1\37\1\40\2\37\1\40\2\37\1\14\32\37\25\41"+
    "\1\42\1\41\1\43\6\41\1\44\1\45\1\35\1\46"+
    "\10\47\1\0\31\47\2\0\1\50\5\0\1\15\1\0"+
    "\15\50\1\35\5\50\50\0\1\11\2\12\1\11\1\51"+
    "\1\0\1\11\2\0\15\12\1\0\5\12\6\0\1\52"+
    "\3\12\2\0\1\52\2\0\15\12\1\0\5\12\7\0"+
    "\3\53\1\0\1\54\2\0\1\55\15\53\1\0\5\53"+
    "\6\0\1\14\2\0\1\14\2\0\1\14\45\0\1\56"+
    "\56\0\1\57\37\0\1\60\30\0\1\61\41\0\1\62"+
    "\45\0\1\63\51\0\1\64\31\0\1\65\41\0\1\66"+
    "\45\0\1\67\37\0\1\70\16\0\35\31\1\0\5\31"+
    "\1\32\2\31\1\32\2\31\1\32\25\31\1\0\4\31"+
    "\6\0\1\54\2\0\1\71\31\0\1\34\2\0\1\34"+
    "\1\72\1\0\1\34\32\0\7\37\1\0\32\37\27\41"+
    "\1\0\6\41\4\0\14\41\1\73\12\41\1\0\6\41"+
    "\6\0\1\50\7\0\15\50\1\74\5\50\7\0\3\53"+
    "\4\0\1\55\15\53\1\0\5\53\6\0\1\52\2\0"+
    "\1\52\2\0\1\52\34\0\3\53\3\0\1\52\1\0"+
    "\15\53\1\0\5\53\7\0\3\53\1\0\1\75\3\0"+
    "\15\53\1\0\5\53\21\0\1\76\55\0\1\77\26\0"+
    "\1\100\47\0\1\101\37\0\1\102\32\0\1\103\54\0"+
    "\1\104\37\0\1\105\42\0\1\106\45\0\1\107\35\0"+
    "\1\110\23\0\1\111\44\0\1\71\30\0\16\41\1\112"+
    "\10\41\1\0\6\41\15\0\1\113\40\0\1\114\43\0"+
    "\1\115\56\0\1\116\37\0\1\117\26\0\1\120\45\0"+
    "\1\121\27\0\1\122\67\0\1\123\24\0\1\124\46\0"+
    "\1\125\34\0\1\126\55\0\1\127\20\0\1\130\42\0"+
    "\1\131\31\0\1\114\2\0\1\114\2\0\1\114\47\0"+
    "\1\132\26\0\2\133\6\0\15\133\1\0\5\133\34\0"+
    "\1\134\36\0\1\135\37\0\1\136\21\0\2\137\6\0"+
    "\15\137\1\0\5\137\34\0\1\140\27\0\1\141\57\0"+
    "\1\142\36\0\1\143\12\0\1\130\2\0\1\130\2\0"+
    "\1\130\34\0\2\144\6\0\15\144\1\0\5\144\20\0"+
    "\1\145\30\0\2\146\6\0\15\146\1\0\5\146\26\0"+
    "\1\147\33\0\1\150\51\0\1\151\16\0\10\144\1\0"+
    "\31\144\16\0\1\152\41\0\1\153\40\0\1\154\45\0"+
    "\1\155\37\0\1\156\37\0\1\157\30\0\1\160\47\0"+
    "\1\161\33\0\1\162\41\0\1\163\41\0\1\164\37\0"+
    "\2\165\6\0\15\165\1\0\5\165\7\0\2\166\6\0"+
    "\15\166\1\0\5\166\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\3\0\1\11\4\1\1\11\13\0\2\1"+
    "\1\0\1\1\2\11\4\1\4\11\1\1\2\0\1\1"+
    "\1\0\1\11\16\0\1\1\16\0\1\1\1\0\1\1"+
    "\6\0\1\11\1\1\3\0\1\1\2\0\1\1\3\0"+
    "\1\1\1\0\1\1\2\11\1\1\1\0\1\1\11\0"+
    "\1\11\1\0\1\11\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TemplatingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TemplatingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { return new Symbol(TemplatingSymbols.MAP_KEY_TOKEN, yyline, yycolumn, yytext().trim());
          }
        case 30: break;
        case 19: 
          { String s = yytext().trim().substring(4);
                return new Symbol(TemplatingSymbols.ODD_CALL_TOKEN, yyline, yycolumn, s);
          }
        case 31: break;
        case 22: 
          { return new Symbol(TemplatingSymbols.INDEX_CALL_TOKEN, yyline, yycolumn);
          }
        case 32: break;
        case 12: 
          { yybegin(TEMPLATE);
                          String s = yytext().trim();
                          if(s.startsWith("template ")) s = s.substring(9);
                          return new Symbol(TemplatingSymbols.TEMPLATE_NAME_TOKEN, yyline, yycolumn, s);
          }
        case 33: break;
        case 11: 
          { return new Symbol(TemplatingSymbols.LPAREN_TOKEN, yyline, yycolumn);
          }
        case 34: break;
        case 17: 
          { return new Symbol(TemplatingSymbols.NAME_TOKEN, yyline, yycolumn);
          }
        case 35: break;
        case 29: 
          { String s = yytext().trim();
                String[] vals = s.split(":", 2);
                vals[1] = vals[1].substring(4);
                return new Symbol(TemplatingSymbols.MAP_CALL_TOKEN, yyline, yycolumn, vals);
          }
        case 36: break;
        case 23: 
          { return new Symbol(TemplatingSymbols.GMLID_TOKEN, yyline, yycolumn);
          }
        case 37: break;
        case 8: 
          { yybegin(TEMPLATE_NAME);
          }
        case 38: break;
        case 27: 
          { yybegin(CALL);
                return new Symbol(TemplatingSymbols.PROPERTY_CALL_TOKEN, yyline, yycolumn);
          }
        case 39: break;
        case 4: 
          { yybegin(YYINITIAL);
          }
        case 40: break;
        case 28: 
          { String s = yytext().trim().substring(9);
                return new Symbol(TemplatingSymbols.TEMPLATE_DEFINITION_TOKEN, yyline, yycolumn, s);
          }
        case 41: break;
        case 18: 
          { yybegin(YYINITIAL); return new Symbol(TemplatingSymbols.END_DEFINITION_TOKEN, yyline, yycolumn);
          }
        case 42: break;
        case 26: 
          { yybegin(CALL);
                return new Symbol(TemplatingSymbols.FEATURE_CALL_TOKEN, yyline, yycolumn);
          }
        case 43: break;
        case 13: 
          { yybegin(TEMPLATE);
          }
        case 44: break;
        case 6: 
          { yybegin(MAP_VALUE);
          }
        case 45: break;
        case 9: 
          { return new Symbol(TemplatingSymbols.STAR_TOKEN, yyline, yycolumn);
          }
        case 46: break;
        case 7: 
          { return new Symbol(TemplatingSymbols.SELECTION_TOKEN, yyline, yycolumn, yytext().trim());
          }
        case 47: break;
        case 24: 
          { return new Symbol(TemplatingSymbols.LINK_PREFIX_TOKEN, yyline, yycolumn, yytext());
          }
        case 48: break;
        case 21: 
          { return new Symbol(TemplatingSymbols.VALUE_TOKEN, yyline, yycolumn);
          }
        case 49: break;
        case 14: 
          { return new Symbol(TemplatingSymbols.NOT_TOKEN, yyline, yycolumn);
          }
        case 50: break;
        case 15: 
          { return new Symbol(TemplatingSymbols.END_DEFINITION_TOKEN, yyline, yycolumn);
          }
        case 51: break;
        case 20: 
          { yybegin(MAP_KEY);
                String s = yytext().trim().substring(4);
                return new Symbol(TemplatingSymbols.MAP_DEFINITION_TOKEN, yyline, yycolumn, s);
          }
        case 52: break;
        case 10: 
          { return new Symbol(TemplatingSymbols.RPAREN_TOKEN, yyline, yycolumn);
          }
        case 53: break;
        case 1: 
          { yybegin(MAP_KEY); return new Symbol(TemplatingSymbols.MAP_VALUE_TOKEN, yyline, yycolumn, yytext().trim());
          }
        case 54: break;
        case 25: 
          { String s = yytext().trim().substring(5);
                return new Symbol(TemplatingSymbols.EVEN_CALL_TOKEN, yyline, yycolumn, s);
          }
        case 55: break;
        case 16: 
          { yybegin(LINK);
                return new Symbol(TemplatingSymbols.LINK_CALL_TOKEN, yyline, yycolumn);
          }
        case 56: break;
        case 3: 
          { 
          }
        case 57: break;
        case 2: 
          { return new Symbol(TemplatingSymbols.TEXT_TOKEN, yyline, yycolumn, yytext());
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(TemplatingSymbols.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
